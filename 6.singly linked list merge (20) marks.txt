6.Write a Python program for dynamic implementation of Singly Linked List to perform
following operations:
a. Create
b. Display
c. Merge
ans:
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def display(self):
        current = self.head
        while current:
            print(current.data, end=' ')
            current = current.next

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

def merge_lists(list1, list2):
    merged_list = SinglyLinkedList()
    current1 = list1.head
    current2 = list2.head
    while current1 and current2:
        if current1.data < current2.data:
            merged_list.append(current1.data)
            current1 = current1.next
        else:
 merged_list.append(current2.data)
            current2 = current2.next

    while current1:
        merged_list.append(current1.data)
        current1 = current1.next

    while current2:
        merged_list.append(current2.data)
        current2 = current2.next

    return merged_list

# Example Usage
# Create linked lists
list1 = SinglyLinkedList()
list1.append(1)
list1.append(3)
list1.append(5)
list2 = SinglyLinkedList()
list2.append(2)
list2.append(4)
list2.append(6)

# Display lists
print("List 1:")
list1.display()
print("\nList 2:")
list2.display()

# Merge lists
merged = merge_lists(list1, list2)
print("\nMerged List:")
merged.display()

