1. Write a Python program to perform infix to postfix conversion of given
expression using stack.(A+(C+D*F+T*A)*B/C]
Ans: 
# Function to check if a given character is an operator
def is_operator(char):
operators = ['+', '-', '*', '/', '^']
return char in operators
# Function to get the precedence of an operator
def precedence(operator):
if operator == '+' or operator == '-':
return 1
elif operator == '*' or operator == '/':
return 2
elif operator == '^':
return 3
else:
return -1
# Function to convert infix to postfix
def infix_to_postfix(expression):
postfix = ""
stack = []
for char in expression:
# If the character is an operand, add it to the postfix string
if char.isalnum():
postfix += char
# If the character is an opening parenthesis, push it to the stack
elif char == '(':
stack.append('(')
# If the character is a closing parenthesis, pop operators from the
stack and add them to the postfix string until an opening parenthesis is
encountered
elif char == ')':
while stack and stack[-1] != '(':
postfix += stack.pop()
stack.pop() # Pop the opening parenthesis from the stack
# If the character is an operator, pop operators from the stack and
add them to the postfix string until an operator with lower precedence is
encountered, then push the current operator to the stack
elif is_operator(char):
while stack and stack[-1] != '(' and precedence(char) <=
precedence(stack[-1]):
postfix += stack.pop()
stack.append(char)
# Pop any remaining operators from the stack and add them to the postfix
string
while stack:
postfix += stack.pop()
return postfix
# Test the function
expression = input("Enter an infix expression: ")
postfix = infix_to_postfix(expression)