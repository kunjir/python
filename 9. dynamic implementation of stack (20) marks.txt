9. Write a Python program for dynamic implementation of stack to perform following
operations:
a. init
b. push
c. pop
d. isEmpty
ans:
lass Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class DynamicStack:
    def __init__(self):
        self.top = None

    def isEmpty(self):
        return self.top is None

    def push(self, data):
        new_node = Node(data)
        new_node.next = self.top
        self.top = new_node

    def pop(self):
        if self.isEmpty():
            print("Stack is empty")
        else:
            popped = self.top.data
            self.top = self.top.next
            return popped

    def display(self):
current = self.top
        while current:
            print(current.data)
            current = current.next

# Example Usage
stack = DynamicStack()
stack.push(1)
stack.push(2)
stack.push(3)
stack.display()
stack.pop()
