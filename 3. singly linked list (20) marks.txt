3. Write a Python program for dynamic implementation of Singly Linked List to perform following operations:
a. Create
b. Display
c. Search
Ans:
   class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def create(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            last_node = self.head
            while last_node.next:
                last_node = last_node.next
            last_node.next = new_node
    
    def display(self):
        if self.head is None:
            print("Linked List is empty.")
        else:
            current = self.head
            while current:
                print(current.data, end=" ")
                current = current.next
            print()
    
    def search(self, key):
        if self.head is None:
            print("Linked List is empty.")
        else:
            current = self.head
            pos = 1
            while current:
                if current.data == key:
                    print(key, "found at position", pos)
                    return
                current = current.next
                pos += 1
            print(key, "not found in the Linked List.")

# Create a linked list and perform operations
my_list = LinkedList()

# Create the linked list
n = int(input("Enter the number of elements to be inserted: "))
for _ in range(n):
    data = int(input("Enter the data: "))
    my_list.create(data)

# Display the linked list
print("Linked List:")
my_list.display()

# Search for an element in the linked list
key = int(input("Enter the element to search: "))
my_list.search(key)
        
